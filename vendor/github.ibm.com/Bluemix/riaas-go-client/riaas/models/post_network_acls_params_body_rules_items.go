// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostNetworkAclsParamsBodyRulesItems TupleRuleTemplateNetworkACLContext
// swagger:model postNetworkAclsParamsBodyRulesItems
type PostNetworkAclsParamsBodyRulesItems struct {

	// Whether to allow or deny matching traffic
	// Enum: [allow deny]
	Action string `json:"action,omitempty"`

	// The highest in the range of ICMP codes to be matched; if unspecified, `255` is used. This can be specified only if type_min and type_max are equal.
	CodeMax string `json:"code_max,omitempty"`

	// The lowest in the range of ICMP codes to be matched; if unspecified, `0` is used. This can be specified only if type_min and type_max are equal.
	CodeMin string `json:"code_min,omitempty"`

	// The destination IP address or CIDR block
	Destination string `json:"destination,omitempty"`

	// The inclusive upper bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	DestinationPortMax int64 `json:"destination_port_max,omitempty"`

	// The inclusive lower bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	DestinationPortMin int64 `json:"destination_port_min,omitempty"`

	// Whether the traffic to be matched is ingress or egress
	// Enum: [ingress egress]
	Direction string `json:"direction,omitempty"`

	// The user-defined name for this network ACL rule
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// The inclusive upper bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	PortMax int64 `json:"port_max,omitempty"`

	// The inclusive lower bound of TCP/UDP destination port range
	// Maximum: 65535
	// Minimum: 1
	PortMin int64 `json:"port_min,omitempty"`

	// Must be `all` to match all protocols.
	Protocol string `json:"protocol,omitempty"`

	// The source IP address or CIDR block
	Source string `json:"source,omitempty"`

	// The inclusive upper bound of TCP/UDP source port range
	// Maximum: 65535
	// Minimum: 1
	SourcePortMax int64 `json:"source_port_max,omitempty"`

	// The inclusive lower bound of TCP/UDP source port range
	// Maximum: 65535
	// Minimum: 1
	SourcePortMin int64 `json:"source_port_min,omitempty"`

	// The highest in the range of ICMP types to be matched; if unspecified, `255` is used.
	TypeMax string `json:"type_max,omitempty"`

	// The lowest in the range of ICMP types to be matched; if unspecified, `0` is used.
	TypeMin string `json:"type_min,omitempty"`
}

// Validate validates this post network acls params body rules items
func (m *PostNetworkAclsParamsBodyRulesItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationPortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationPortMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePortMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePortMin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postNetworkAclsParamsBodyRulesItemsTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postNetworkAclsParamsBodyRulesItemsTypeActionPropEnum = append(postNetworkAclsParamsBodyRulesItemsTypeActionPropEnum, v)
	}
}

const (

	// PostNetworkAclsParamsBodyRulesItemsActionAllow captures enum value "allow"
	PostNetworkAclsParamsBodyRulesItemsActionAllow string = "allow"

	// PostNetworkAclsParamsBodyRulesItemsActionDeny captures enum value "deny"
	PostNetworkAclsParamsBodyRulesItemsActionDeny string = "deny"
)

// prop value enum
func (m *PostNetworkAclsParamsBodyRulesItems) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postNetworkAclsParamsBodyRulesItemsTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostNetworkAclsParamsBodyRulesItems) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *PostNetworkAclsParamsBodyRulesItems) validateDestinationPortMax(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationPortMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("destination_port_max", "body", int64(m.DestinationPortMax), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("destination_port_max", "body", int64(m.DestinationPortMax), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PostNetworkAclsParamsBodyRulesItems) validateDestinationPortMin(formats strfmt.Registry) error {

	if swag.IsZero(m.DestinationPortMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("destination_port_min", "body", int64(m.DestinationPortMin), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("destination_port_min", "body", int64(m.DestinationPortMin), 65535, false); err != nil {
		return err
	}

	return nil
}

var postNetworkAclsParamsBodyRulesItemsTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingress","egress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postNetworkAclsParamsBodyRulesItemsTypeDirectionPropEnum = append(postNetworkAclsParamsBodyRulesItemsTypeDirectionPropEnum, v)
	}
}

const (

	// PostNetworkAclsParamsBodyRulesItemsDirectionIngress captures enum value "ingress"
	PostNetworkAclsParamsBodyRulesItemsDirectionIngress string = "ingress"

	// PostNetworkAclsParamsBodyRulesItemsDirectionEgress captures enum value "egress"
	PostNetworkAclsParamsBodyRulesItemsDirectionEgress string = "egress"
)

// prop value enum
func (m *PostNetworkAclsParamsBodyRulesItems) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postNetworkAclsParamsBodyRulesItemsTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostNetworkAclsParamsBodyRulesItems) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *PostNetworkAclsParamsBodyRulesItems) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PostNetworkAclsParamsBodyRulesItems) validatePortMax(formats strfmt.Registry) error {

	if swag.IsZero(m.PortMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("port_max", "body", int64(m.PortMax), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port_max", "body", int64(m.PortMax), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PostNetworkAclsParamsBodyRulesItems) validatePortMin(formats strfmt.Registry) error {

	if swag.IsZero(m.PortMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("port_min", "body", int64(m.PortMin), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port_min", "body", int64(m.PortMin), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PostNetworkAclsParamsBodyRulesItems) validateSourcePortMax(formats strfmt.Registry) error {

	if swag.IsZero(m.SourcePortMax) { // not required
		return nil
	}

	if err := validate.MinimumInt("source_port_max", "body", int64(m.SourcePortMax), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("source_port_max", "body", int64(m.SourcePortMax), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *PostNetworkAclsParamsBodyRulesItems) validateSourcePortMin(formats strfmt.Registry) error {

	if swag.IsZero(m.SourcePortMin) { // not required
		return nil
	}

	if err := validate.MinimumInt("source_port_min", "body", int64(m.SourcePortMin), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("source_port_min", "body", int64(m.SourcePortMin), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostNetworkAclsParamsBodyRulesItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostNetworkAclsParamsBodyRulesItems) UnmarshalBinary(b []byte) error {
	var res PostNetworkAclsParamsBodyRulesItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
