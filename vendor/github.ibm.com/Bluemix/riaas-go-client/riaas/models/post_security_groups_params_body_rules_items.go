// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostSecurityGroupsParamsBodyRulesItems SecurityGroupRuleTemplate
//
// When 'protocol' is either of 'tcp' or 'udp', then the rule may also contain fields to specify a port range.
// swagger:model postSecurityGroupsParamsBodyRulesItems
type PostSecurityGroupsParamsBodyRulesItems struct {

	// The direction of traffic to enforce (ingress, egress)
	// Enum: [ingress egress]
	Direction string `json:"direction,omitempty"`

	// The IP version to enforce (ipv4, ipv6). The format of 'remote.address' or 'remote.cidr_block' must match this field, if they are used. Also, if 'remote' references another security group (ie. using remote.id, remote.name, remote.crn) then this rule will only apply to IP addresses (network interfaces) in that group which match this ip_version.
	// Enum: [ipv4 ipv6]
	IPVersion string `json:"ip_version,omitempty"`

	// The protocol to enforce. Must be one of (icmp, tcp, udp, all). Defaults to 'all' if omitted.
	// Enum: [all icmp tcp udp]
	Protocol *string `json:"protocol,omitempty"`

	// remote
	Remote *PostSecurityGroupsParamsBodyRulesItemsRemote `json:"remote,omitempty"`
}

// Validate validates this post security groups params body rules items
func (m *PostSecurityGroupsParamsBodyRulesItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemote(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postSecurityGroupsParamsBodyRulesItemsTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingress","egress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postSecurityGroupsParamsBodyRulesItemsTypeDirectionPropEnum = append(postSecurityGroupsParamsBodyRulesItemsTypeDirectionPropEnum, v)
	}
}

const (

	// PostSecurityGroupsParamsBodyRulesItemsDirectionIngress captures enum value "ingress"
	PostSecurityGroupsParamsBodyRulesItemsDirectionIngress string = "ingress"

	// PostSecurityGroupsParamsBodyRulesItemsDirectionEgress captures enum value "egress"
	PostSecurityGroupsParamsBodyRulesItemsDirectionEgress string = "egress"
)

// prop value enum
func (m *PostSecurityGroupsParamsBodyRulesItems) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postSecurityGroupsParamsBodyRulesItemsTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostSecurityGroupsParamsBodyRulesItems) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

var postSecurityGroupsParamsBodyRulesItemsTypeIPVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipv4","ipv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postSecurityGroupsParamsBodyRulesItemsTypeIPVersionPropEnum = append(postSecurityGroupsParamsBodyRulesItemsTypeIPVersionPropEnum, v)
	}
}

const (

	// PostSecurityGroupsParamsBodyRulesItemsIPVersionIPV4 captures enum value "ipv4"
	PostSecurityGroupsParamsBodyRulesItemsIPVersionIPV4 string = "ipv4"

	// PostSecurityGroupsParamsBodyRulesItemsIPVersionIPV6 captures enum value "ipv6"
	PostSecurityGroupsParamsBodyRulesItemsIPVersionIPV6 string = "ipv6"
)

// prop value enum
func (m *PostSecurityGroupsParamsBodyRulesItems) validateIPVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postSecurityGroupsParamsBodyRulesItemsTypeIPVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostSecurityGroupsParamsBodyRulesItems) validateIPVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.IPVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPVersionEnum("ip_version", "body", m.IPVersion); err != nil {
		return err
	}

	return nil
}

var postSecurityGroupsParamsBodyRulesItemsTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","icmp","tcp","udp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postSecurityGroupsParamsBodyRulesItemsTypeProtocolPropEnum = append(postSecurityGroupsParamsBodyRulesItemsTypeProtocolPropEnum, v)
	}
}

const (

	// PostSecurityGroupsParamsBodyRulesItemsProtocolAll captures enum value "all"
	PostSecurityGroupsParamsBodyRulesItemsProtocolAll string = "all"

	// PostSecurityGroupsParamsBodyRulesItemsProtocolIcmp captures enum value "icmp"
	PostSecurityGroupsParamsBodyRulesItemsProtocolIcmp string = "icmp"

	// PostSecurityGroupsParamsBodyRulesItemsProtocolTCP captures enum value "tcp"
	PostSecurityGroupsParamsBodyRulesItemsProtocolTCP string = "tcp"

	// PostSecurityGroupsParamsBodyRulesItemsProtocolUDP captures enum value "udp"
	PostSecurityGroupsParamsBodyRulesItemsProtocolUDP string = "udp"
)

// prop value enum
func (m *PostSecurityGroupsParamsBodyRulesItems) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postSecurityGroupsParamsBodyRulesItemsTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostSecurityGroupsParamsBodyRulesItems) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *PostSecurityGroupsParamsBodyRulesItems) validateRemote(formats strfmt.Registry) error {

	if swag.IsZero(m.Remote) { // not required
		return nil
	}

	if m.Remote != nil {
		if err := m.Remote.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostSecurityGroupsParamsBodyRulesItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostSecurityGroupsParamsBodyRulesItems) UnmarshalBinary(b []byte) error {
	var res PostSecurityGroupsParamsBodyRulesItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
