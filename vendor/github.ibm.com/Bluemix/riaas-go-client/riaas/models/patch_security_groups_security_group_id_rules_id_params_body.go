// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody SecurityGroupRuleTemplate
// swagger:model patchSecurityGroupsSecurityGroupIdRulesIdParamsBody
type PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody struct {

	// The ICMP traffic code to allow. Valid values from 0 to 255. If unspecified, all codes are allowed. This can only be specified if type is also specified.
	Code *int64 `json:"code,omitempty"`

	// The direction of traffic to enforce (ingress, egress)
	// Enum: [ingress egress]
	Direction string `json:"direction,omitempty"`

	// The IP version to enforce (ipv4, ipv6). The format of 'remote.address' or 'remote.cidr_block' must match this field, if they are used. Also, if 'remote' references another security group (ie. using remote.id, remote.name, remote.crn) then this rule will only apply to IP addresses (network interfaces) in that group which match this ip_version.
	// Enum: [ipv4 ipv6]
	IPVersion string `json:"ip_version,omitempty"`

	// The highest port in the range of ports to be matched; if unspecified, `65535` is used.
	PortMax *int64 `json:"port_max,omitempty"`

	// The lowest port in the range of ports to be matched; if unspecified, `1` is used.
	PortMin *int64 `json:"port_min,omitempty"`

	// The protocol to enforce. Must be one of (icmp, tcp, udp, all). Defaults to 'all' if omitted.
	// Enum: [all icmp tcp udp]
	Protocol string `json:"protocol,omitempty"`

	// remote
	Remote *PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyRemote `json:"remote,omitempty"`

	// The ICMP traffic type to allow. Valid values from 0 to 254. If unspecified, all types are allowed by this rule.
	Type *int64 `json:"type,omitempty"`
}

// Validate validates this patch security groups security group Id rules Id params body
func (m *PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemote(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchSecurityGroupsSecurityGroupIdRulesIdParamsBodyTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingress","egress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchSecurityGroupsSecurityGroupIdRulesIdParamsBodyTypeDirectionPropEnum = append(patchSecurityGroupsSecurityGroupIdRulesIdParamsBodyTypeDirectionPropEnum, v)
	}
}

const (

	// PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyDirectionIngress captures enum value "ingress"
	PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyDirectionIngress string = "ingress"

	// PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyDirectionEgress captures enum value "egress"
	PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyDirectionEgress string = "egress"
)

// prop value enum
func (m *PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patchSecurityGroupsSecurityGroupIdRulesIdParamsBodyTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

var patchSecurityGroupsSecurityGroupIdRulesIdParamsBodyTypeIPVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipv4","ipv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchSecurityGroupsSecurityGroupIdRulesIdParamsBodyTypeIPVersionPropEnum = append(patchSecurityGroupsSecurityGroupIdRulesIdParamsBodyTypeIPVersionPropEnum, v)
	}
}

const (

	// PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyIPVersionIPV4 captures enum value "ipv4"
	PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyIPVersionIPV4 string = "ipv4"

	// PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyIPVersionIPV6 captures enum value "ipv6"
	PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyIPVersionIPV6 string = "ipv6"
)

// prop value enum
func (m *PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody) validateIPVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patchSecurityGroupsSecurityGroupIdRulesIdParamsBodyTypeIPVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody) validateIPVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.IPVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPVersionEnum("ip_version", "body", m.IPVersion); err != nil {
		return err
	}

	return nil
}

var patchSecurityGroupsSecurityGroupIdRulesIdParamsBodyTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","icmp","tcp","udp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchSecurityGroupsSecurityGroupIdRulesIdParamsBodyTypeProtocolPropEnum = append(patchSecurityGroupsSecurityGroupIdRulesIdParamsBodyTypeProtocolPropEnum, v)
	}
}

const (

	// PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyProtocolAll captures enum value "all"
	PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyProtocolAll string = "all"

	// PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyProtocolIcmp captures enum value "icmp"
	PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyProtocolIcmp string = "icmp"

	// PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyProtocolTCP captures enum value "tcp"
	PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyProtocolTCP string = "tcp"

	// PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyProtocolUDP captures enum value "udp"
	PatchSecurityGroupsSecurityGroupIDRulesIDParamsBodyProtocolUDP string = "udp"
)

// prop value enum
func (m *PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patchSecurityGroupsSecurityGroupIdRulesIdParamsBodyTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody) validateRemote(formats strfmt.Registry) error {

	if swag.IsZero(m.Remote) { // not required
		return nil
	}

	if m.Remote != nil {
		if err := m.Remote.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody) UnmarshalBinary(b []byte) error {
	var res PatchSecurityGroupsSecurityGroupIDRulesIDParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
