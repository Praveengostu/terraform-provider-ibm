// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeVolumeAttachmentsItems volume volume attachments items
// swagger:model volumeVolumeAttachmentsItems
type VolumeVolumeAttachmentsItems struct {

	// If set to true, when deleting the instance the volume will also be deleted
	DeleteVolumeOnInstanceDelete bool `json:"delete_volume_on_instance_delete,omitempty"`

	// The URL for this volume attachment
	// Pattern: ^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$
	Href string `json:"href,omitempty"`

	// The unique identifier for this volume attachment
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// instance
	Instance *VolumeVolumeAttachmentsItemsInstance `json:"instance,omitempty"`

	// The user-defined name for this volume attachment
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name string `json:"name,omitempty"`

	// The type of volume attachment
	// Enum: [boot data]
	Type string `json:"type,omitempty"`
}

// Validate validates this volume volume attachments items
func (m *VolumeVolumeAttachmentsItems) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeVolumeAttachmentsItems) validateHref(formats strfmt.Registry) error {

	if swag.IsZero(m.Href) { // not required
		return nil
	}

	if err := validate.Pattern("href", "body", string(m.Href), `^http(s)?:\/\/([^\/?#]*)([^?#]*)(\?([^#]*))?(#(.*))?$`); err != nil {
		return err
	}

	return nil
}

func (m *VolumeVolumeAttachmentsItems) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VolumeVolumeAttachmentsItems) validateInstance(formats strfmt.Registry) error {

	if swag.IsZero(m.Instance) { // not required
		return nil
	}

	if m.Instance != nil {
		if err := m.Instance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeVolumeAttachmentsItems) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

var volumeVolumeAttachmentsItemsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["boot","data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeVolumeAttachmentsItemsTypeTypePropEnum = append(volumeVolumeAttachmentsItemsTypeTypePropEnum, v)
	}
}

const (

	// VolumeVolumeAttachmentsItemsTypeBoot captures enum value "boot"
	VolumeVolumeAttachmentsItemsTypeBoot string = "boot"

	// VolumeVolumeAttachmentsItemsTypeData captures enum value "data"
	VolumeVolumeAttachmentsItemsTypeData string = "data"
)

// prop value enum
func (m *VolumeVolumeAttachmentsItems) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, volumeVolumeAttachmentsItemsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VolumeVolumeAttachmentsItems) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeVolumeAttachmentsItems) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeVolumeAttachmentsItems) UnmarshalBinary(b []byte) error {
	var res VolumeVolumeAttachmentsItems
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
