// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageFromServerTemplate Image
// swagger:model imageFromServerTemplate
type ImageFromServerTemplate struct {

	// The image architecture
	// Required: true
	// Enum: [amd64 powerpc]
	Architecture *string `json:"architecture"`

	// file
	// Required: true
	File *ImageFromServerTemplateFile `json:"file"`

	// format
	// Required: true
	// Enum: [raw qcow2 vmdk vhdx vdi ova box]
	Format *string `json:"format"`

	// The user-defined name for this image
	// Required: true
	// Pattern: ^[A-Za-z][-A-Za-z0-9_]*$
	Name *string `json:"name"`

	// operating system
	OperatingSystem *ImageFromServerTemplateOperatingSystem `json:"operating_system,omitempty"`

	// resource group
	ResourceGroup *ResourceReferenceWithOutCrn `json:"resource_group,omitempty"`

	// source instance
	SourceInstance *ResourceReferenceWithOutCrn `json:"source_instance,omitempty"`
}

// Validate validates this image from server template
func (m *ImageFromServerTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceInstance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var imageFromServerTemplateTypeArchitecturePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["amd64","powerpc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageFromServerTemplateTypeArchitecturePropEnum = append(imageFromServerTemplateTypeArchitecturePropEnum, v)
	}
}

const (

	// ImageFromServerTemplateArchitectureAmd64 captures enum value "amd64"
	ImageFromServerTemplateArchitectureAmd64 string = "amd64"

	// ImageFromServerTemplateArchitecturePowerpc captures enum value "powerpc"
	ImageFromServerTemplateArchitecturePowerpc string = "powerpc"
)

// prop value enum
func (m *ImageFromServerTemplate) validateArchitectureEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageFromServerTemplateTypeArchitecturePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ImageFromServerTemplate) validateArchitecture(formats strfmt.Registry) error {

	if err := validate.Required("architecture", "body", m.Architecture); err != nil {
		return err
	}

	// value enum
	if err := m.validateArchitectureEnum("architecture", "body", *m.Architecture); err != nil {
		return err
	}

	return nil
}

func (m *ImageFromServerTemplate) validateFile(formats strfmt.Registry) error {

	if err := validate.Required("file", "body", m.File); err != nil {
		return err
	}

	if m.File != nil {
		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

var imageFromServerTemplateTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["raw","qcow2","vmdk","vhdx","vdi","ova","box"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageFromServerTemplateTypeFormatPropEnum = append(imageFromServerTemplateTypeFormatPropEnum, v)
	}
}

const (

	// ImageFromServerTemplateFormatRaw captures enum value "raw"
	ImageFromServerTemplateFormatRaw string = "raw"

	// ImageFromServerTemplateFormatQcow2 captures enum value "qcow2"
	ImageFromServerTemplateFormatQcow2 string = "qcow2"

	// ImageFromServerTemplateFormatVMDK captures enum value "vmdk"
	ImageFromServerTemplateFormatVMDK string = "vmdk"

	// ImageFromServerTemplateFormatVhdx captures enum value "vhdx"
	ImageFromServerTemplateFormatVhdx string = "vhdx"

	// ImageFromServerTemplateFormatVdi captures enum value "vdi"
	ImageFromServerTemplateFormatVdi string = "vdi"

	// ImageFromServerTemplateFormatOva captures enum value "ova"
	ImageFromServerTemplateFormatOva string = "ova"

	// ImageFromServerTemplateFormatBox captures enum value "box"
	ImageFromServerTemplateFormatBox string = "box"
)

// prop value enum
func (m *ImageFromServerTemplate) validateFormatEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageFromServerTemplateTypeFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ImageFromServerTemplate) validateFormat(formats strfmt.Registry) error {

	if err := validate.Required("format", "body", m.Format); err != nil {
		return err
	}

	// value enum
	if err := m.validateFormatEnum("format", "body", *m.Format); err != nil {
		return err
	}

	return nil
}

func (m *ImageFromServerTemplate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[A-Za-z][-A-Za-z0-9_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *ImageFromServerTemplate) validateOperatingSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.OperatingSystem) { // not required
		return nil
	}

	if m.OperatingSystem != nil {
		if err := m.OperatingSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operating_system")
			}
			return err
		}
	}

	return nil
}

func (m *ImageFromServerTemplate) validateResourceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceGroup) { // not required
		return nil
	}

	if m.ResourceGroup != nil {
		if err := m.ResourceGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_group")
			}
			return err
		}
	}

	return nil
}

func (m *ImageFromServerTemplate) validateSourceInstance(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceInstance) { // not required
		return nil
	}

	if m.SourceInstance != nil {
		if err := m.SourceInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_instance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageFromServerTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageFromServerTemplate) UnmarshalBinary(b []byte) error {
	var res ImageFromServerTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
