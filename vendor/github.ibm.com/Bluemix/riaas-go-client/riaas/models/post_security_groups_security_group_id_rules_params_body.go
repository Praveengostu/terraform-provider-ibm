// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostSecurityGroupsSecurityGroupIDRulesParamsBody SecurityGroupRuleTemplate
// swagger:model postSecurityGroupsSecurityGroupIdRulesParamsBody
type PostSecurityGroupsSecurityGroupIDRulesParamsBody struct {

	// The ICMP traffic code to allow. Valid values from 0 to 255. If unspecified, all codes are allowed. This can only be specified if type is also specified.
	Code *int64 `json:"code,omitempty"`

	// The direction of traffic to enforce (ingress, egress)
	// Required: true
	// Enum: [ingress egress]
	Direction *string `json:"direction"`

	// The IP version to enforce (ipv4, ipv6). The format of 'remote.address' or 'remote.cidr_block' must match this field, if they are used. Also, if 'remote' references another security group (ie. using remote.id, remote.name, remote.crn) then this rule will only apply to IP addresses (network interfaces) in that group which match this ip_version.
	// Enum: [ipv4 ipv6]
	IPVersion string `json:"ip_version,omitempty"`

	// The highest port in the range of ports to be matched; if unspecified, `65535` is used.
	PortMax *int64 `json:"port_max,omitempty"`

	// The lowest port in the range of ports to be matched; if unspecified, `1` is used.
	PortMin *int64 `json:"port_min,omitempty"`

	// The protocol to enforce. Must be one of (icmp, tcp, udp, all). Defaults to 'all' if omitted.
	// Required: true
	// Enum: [all icmp tcp udp]
	Protocol *string `json:"protocol"`

	// remote
	Remote *PostSecurityGroupsSecurityGroupIDRulesParamsBodyRemote `json:"remote,omitempty"`

	// The ICMP traffic type to allow. Valid values from 0 to 254. If unspecified, all types are allowed by this rule.
	Type *int64 `json:"type,omitempty"`
}

// Validate validates this post security groups security group Id rules params body
func (m *PostSecurityGroupsSecurityGroupIDRulesParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemote(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var postSecurityGroupsSecurityGroupIdRulesParamsBodyTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingress","egress"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postSecurityGroupsSecurityGroupIdRulesParamsBodyTypeDirectionPropEnum = append(postSecurityGroupsSecurityGroupIdRulesParamsBodyTypeDirectionPropEnum, v)
	}
}

const (

	// PostSecurityGroupsSecurityGroupIDRulesParamsBodyDirectionIngress captures enum value "ingress"
	PostSecurityGroupsSecurityGroupIDRulesParamsBodyDirectionIngress string = "ingress"

	// PostSecurityGroupsSecurityGroupIDRulesParamsBodyDirectionEgress captures enum value "egress"
	PostSecurityGroupsSecurityGroupIDRulesParamsBodyDirectionEgress string = "egress"
)

// prop value enum
func (m *PostSecurityGroupsSecurityGroupIDRulesParamsBody) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postSecurityGroupsSecurityGroupIdRulesParamsBodyTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostSecurityGroupsSecurityGroupIDRulesParamsBody) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

var postSecurityGroupsSecurityGroupIdRulesParamsBodyTypeIPVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipv4","ipv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postSecurityGroupsSecurityGroupIdRulesParamsBodyTypeIPVersionPropEnum = append(postSecurityGroupsSecurityGroupIdRulesParamsBodyTypeIPVersionPropEnum, v)
	}
}

const (

	// PostSecurityGroupsSecurityGroupIDRulesParamsBodyIPVersionIPV4 captures enum value "ipv4"
	PostSecurityGroupsSecurityGroupIDRulesParamsBodyIPVersionIPV4 string = "ipv4"

	// PostSecurityGroupsSecurityGroupIDRulesParamsBodyIPVersionIPV6 captures enum value "ipv6"
	PostSecurityGroupsSecurityGroupIDRulesParamsBodyIPVersionIPV6 string = "ipv6"
)

// prop value enum
func (m *PostSecurityGroupsSecurityGroupIDRulesParamsBody) validateIPVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postSecurityGroupsSecurityGroupIdRulesParamsBodyTypeIPVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostSecurityGroupsSecurityGroupIDRulesParamsBody) validateIPVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.IPVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPVersionEnum("ip_version", "body", m.IPVersion); err != nil {
		return err
	}

	return nil
}

var postSecurityGroupsSecurityGroupIdRulesParamsBodyTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","icmp","tcp","udp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postSecurityGroupsSecurityGroupIdRulesParamsBodyTypeProtocolPropEnum = append(postSecurityGroupsSecurityGroupIdRulesParamsBodyTypeProtocolPropEnum, v)
	}
}

const (

	// PostSecurityGroupsSecurityGroupIDRulesParamsBodyProtocolAll captures enum value "all"
	PostSecurityGroupsSecurityGroupIDRulesParamsBodyProtocolAll string = "all"

	// PostSecurityGroupsSecurityGroupIDRulesParamsBodyProtocolIcmp captures enum value "icmp"
	PostSecurityGroupsSecurityGroupIDRulesParamsBodyProtocolIcmp string = "icmp"

	// PostSecurityGroupsSecurityGroupIDRulesParamsBodyProtocolTCP captures enum value "tcp"
	PostSecurityGroupsSecurityGroupIDRulesParamsBodyProtocolTCP string = "tcp"

	// PostSecurityGroupsSecurityGroupIDRulesParamsBodyProtocolUDP captures enum value "udp"
	PostSecurityGroupsSecurityGroupIDRulesParamsBodyProtocolUDP string = "udp"
)

// prop value enum
func (m *PostSecurityGroupsSecurityGroupIDRulesParamsBody) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postSecurityGroupsSecurityGroupIdRulesParamsBodyTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostSecurityGroupsSecurityGroupIDRulesParamsBody) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *PostSecurityGroupsSecurityGroupIDRulesParamsBody) validateRemote(formats strfmt.Registry) error {

	if swag.IsZero(m.Remote) { // not required
		return nil
	}

	if m.Remote != nil {
		if err := m.Remote.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostSecurityGroupsSecurityGroupIDRulesParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostSecurityGroupsSecurityGroupIDRulesParamsBody) UnmarshalBinary(b []byte) error {
	var res PostSecurityGroupsSecurityGroupIDRulesParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
